package main;

/*
 * üéØ B√†i to√°n: TH·ªúI ƒêI·ªÇM T·ªêT NH·∫§T ƒê·ªÇ MUA V√Ä B√ÅN C·ªî PHI·∫æU
 *
 * Cho m·∫£ng prices, v·ªõi prices[i] l√† gi√° c·ªï phi·∫øu ·ªü ng√†y i.
 * Ch·ªçn 1 ng√†y mua (i) v√† 1 ng√†y b√°n (j > i) ƒë·ªÉ t·ªëi ƒëa l·ª£i nhu·∫≠n.
 * Tr·∫£ v·ªÅ l·ª£i nhu·∫≠n t·ªëi ƒëa, ho·∫∑c 0 n·∫øu kh√¥ng c√≥ l·ª£i nhu·∫≠n.
 *
 * V√≠ d·ª•:
 * - [7,1,5,3,6,4] -> 5 (mua 1, b√°n 6)
 * - [7,6,4,3,1]   -> 0
 */

public class BestTimeToBuySAndSellStock {
	public int maxProfit(int[] prices) {
		if (prices == null || prices.length == 0)
			return 0;

		int minPrice = Integer.MAX_VALUE;
		int maxProfit = 0;

		for (int p : prices) {
			if (p < minPrice) {
				minPrice = p;
			} else {
				maxProfit = Math.max(maxProfit, p - minPrice);
			}
		}
		return maxProfit;
	}

	// üß™ Test nhanh
	public static void main(String[] args) {
		BestTimeToBuySAndSellStock solver = new BestTimeToBuySAndSellStock();

		int[] t1 = { 7, 1, 5, 3, 6, 4 };
		int[] t2 = { 7, 6, 4, 3, 1 };
		int[] t3 = { 2, 4, 1 };
		int[] t4 = { 2, 1, 2, 1, 0, 1, 2 };

		System.out.println("Input: [7,1,5,3,6,4] -> " + solver.maxProfit(t1)); // 5
		System.out.println("Input: [7,6,4,3,1]   -> " + solver.maxProfit(t2)); // 0
		System.out.println("Input: [2,4,1]       -> " + solver.maxProfit(t3)); // 2 (mua 2, b√°n 4)
		System.out.println("Input: [2,1,2,1,0,1,2]-> " + solver.maxProfit(t4)); // 2 (mua 0, b√°n 2)
	}
}
